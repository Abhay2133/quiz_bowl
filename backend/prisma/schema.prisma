generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  teamId      Int?
  team        Team?        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  submissions Submission[]
  // scores      Score[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  users       User[]
  submissions Submission[]
  teamQuizzes TeamQuiz[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Quiz {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  quizcode      String       @unique
  positiveScore Int          @default(1)
  negativeScore Int          @default(0)
  duration      Int
  startTiming   DateTime
  date          DateTime
  rounds        Round[]
  submissions   Submission[]
  // scores        Score[]
  teamQuizzes   TeamQuiz[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model TeamQuiz {
  id        Int      @id @default(autoincrement())
  teamId    Int
  quizId    Int
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, quizId]) // Ensure that a team and quiz combination is unique
}

model Round {
  id        Int        @id @default(autoincrement())
  quizId    Int
  name      String
  easyQ     Int        @default(0)
  mediumQ   Int        @default(0)
  hardQ     Int        @default(0)
  questions Question[]
  quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id         Int          @id @default(autoincrement())
  question   String
  answer     ANSWER
  option1    String
  option2    String
  option3    String
  option4    String
  type       QuestionType
  link       String?
  difficulty Difficulty
  roundId    Int
  round      Round        @relation(fields: [roundId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Submission {
  id          Int      @id @default(autoincrement())
  quizId      Int
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  teamId      Int
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     Json
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  score       Int      @default(0)
}

// model Score {
//   id           Int        @id @default(autoincrement())
//   userId       Int
//   user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
//   quizId       Int
//   quiz         Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
//   score        Int
//   submissionId Int
//   submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
// }

enum QuestionType {
  TEXT
  AUDIO
  IMAGE
  VIDEO
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ANSWER {
  OPTION1
  OPTION2
  OPTION3
  OPTION4
}
